{"version":3,"sources":["webpack://hrayd-blog/./src/components/bio.js","webpack://hrayd-blog/./src/components/tag.js","webpack://hrayd-blog/./src/pages/index.js"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","tag","index","onClick","style","selected","tagStyles","length","color","background","border","role","onKeyPress","tabIndex","borderColor","data","location","React","selectTags","setSelectTags","siteTitle","title","posts","allMarkdownRemark","nodes","allTags","tSet","Set","forEach","p","frontmatter","tags","includes","split","t","add","trim","Array","from","getTags","onClickTag","prev","filter","showPosts","map","tm","some","ts","filterPosts","key","listStyle","post","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"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","file":"component---src-pages-index-js-a61f5dba934ef8f22a44.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  // const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      <div>\n        {author?.name && (\n          <p>\n            <strong>{author.name}</strong> 的个人博客\n          </p>\n        )}\n        {author?.summary && <p>{author?.summary || null}</p>}\n      </div>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\n\nconst TagView = ({ tag, index, onClick, selected }) => {\n  const style = selected\n    ? tagStyles[index % tagStyles.length]\n    : {\n        color: \"gray\",\n        background: \"white\",\n        border: \"1px dashed lightgray\",\n      }\n  return (\n    <div\n      className=\"tag-view\"\n      style={style}\n      onClick={onClick}\n      role=\"button\"\n      onKeyPress={onClick}\n      tabIndex=\"0\"\n    >\n      {tag}\n    </div>\n  )\n}\n\nexport default TagView\n\nconst tagStyles = [\n  {\n    color: \"#c41d7f\",\n    background: \"#fff0f6\",\n    borderColor: \"#ffadd2\",\n  },\n  {\n    color: \"#1d39c4\",\n    background: \"#f0f5ff\",\n    borderColor: \"#adc6ff\",\n  },\n  {\n    color: \"#08979c\",\n    background: \"#e6fffb\",\n    borderColor: \"#87e8de\",\n  },\n  {\n    color: \"#531dab\",\n    background: \"#f9f0ff\",\n    borderColor: \"#d3adf7\",\n  },\n  {\n    color: \"#d48806\",\n    background: \"#fffbe6\",\n    borderColor: \"#ffe58f\",\n  },\n  {\n    color: \"#cf1322\",\n    background: \"#fff1f0\",\n    borderColor: \"#ffa39e\",\n  },\n  {\n    color: \"#7cb305\",\n    background: \"#fcffe6\",\n    borderColor: \"#eaff8f\",\n  },\n  {\n    color: \"#d4380d\",\n    background: \"#fff2e8\",\n    borderColor: \"#ffbb96\",\n  },\n  {\n    color: \"#096dd9\",\n    background: \"#e6f7ff\",\n    borderColor: \"#91d5ff\",\n  },\n  {\n    color: \"#d46b08\",\n    background: \"#fff7e6\",\n    borderColor: \"#ffd591\",\n  },\n  {\n    color: \"#389e0d\",\n    background: \"#f6ffed\",\n    borderColor: \"#b7eb8f\",\n  },\n]\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TagView from \"../components/tag\"\n\nconst getTags = posts => {\n  const tSet = new Set()\n  posts.forEach(p => {\n    if (!p.frontmatter.tags) {\n      return\n    }\n    let tag = p.frontmatter.tags\n    if (tag.includes(\",\")) {\n      tag.split(\",\").forEach(t => tSet.add(t.trim()))\n    } else {\n      tSet.add(tag)\n    }\n  })\n  return Array.from(tSet)\n}\n\nconst filterPosts = (posts, tags) => {\n  return posts.filter(p => {\n    let t = p.frontmatter.tags\n    if (!t) return true\n    if (!t.includes(\",\")) return tags.includes(t)\n    t = t.split(\",\").map(tm => tm.trim())\n    return t.some(ts => tags.includes(ts))\n  })\n}\n\nconst BlogIndex = ({ data, location }) => {\n  const [selectTags, setSelectTags] = React.useState([])\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  const allTags = React.useMemo(() => getTags(posts), [posts])\n\n  const onClickTag = React.useCallback(\n    t => {\n      setSelectTags(prev => {\n        if (prev.length === allTags.length) return [t]\n        if (prev.includes(t)) return prev.filter(p => p !== t)\n        return [...prev, t]\n      })\n    },\n    [allTags]\n  )\n\n  React.useEffect(() => setSelectTags(allTags), [allTags])\n\n  const showPosts = React.useMemo(() => {\n    if (!posts.length) return []\n    if (allTags.length === selectTags.length) return posts\n    return filterPosts(posts, selectTags)\n  }, [posts, selectTags, allTags])\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <div>\n        {allTags.map((t, index) => (\n          <TagView\n            key={t}\n            tag={t}\n            index={index}\n            onClick={() => onClickTag(t)}\n            selected={selectTags.includes(t)}\n          />\n        ))}\n        <TagView\n          tag={\"全部\"}\n          index={allTags.length}\n          onClick={() => setSelectTags(allTags)}\n          selected={selectTags.length === allTags.length}\n        />\n      </div>\n      {posts.length ? (\n        <ol style={{ listStyle: `none` }}>\n          {showPosts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n      ) : (\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}