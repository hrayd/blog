{"componentChunkName":"component---src-templates-blog-post-js","path":"/http-1/","result":{"data":{"site":{"siteMetadata":{"title":"按太阳穴轮刮眼眶"}},"markdownRemark":{"id":"9daf0fea-060c-53a0-a56b-4b40ea7eded5","excerpt":"HTTP Hyper Text Transfer Protocol - 超文本传输协议 应用层协议, 构建在 TCP/IP 协议之上. 请求方: User Agent, 如浏览器、爬虫等 应答方: 服务器, 如 Apache、Nginx 等 CDN Content Delivery Network…","html":"<h2>HTTP</h2>\n<p>Hyper Text Transfer Protocol - 超文本传输协议</p>\n<p>应用层协议, 构建在 TCP/IP 协议之上.</p>\n<ul>\n<li>请求方: User Agent, 如浏览器、爬虫等</li>\n<li>应答方: 服务器, 如 Apache、Nginx 等</li>\n</ul>\n<h2>CDN</h2>\n<p>Content Delivery Network - 内容分发网络</p>\n<p>应用了 HTTP 协议中的缓存和代理技术, 通过缓存快速响应客户端的请求.</p>\n<p>处于请求方(浏览器)和应答方(服务器)之间.</p>\n<h2>TCP/IP</h2>\n<h3>IP</h3>\n<p>Internate Protocol, 网络层, 主要目的是解决寻址和路由问题.</p>\n<p>通过 IP 地址定位网络节点.</p>\n<p>IP 协议:</p>\n<ul>\n<li>v4: 4 组 8 位地址, 总共 <code class=\"language-text\">2**32(约42亿)</code> 个可分配地址</li>\n<li>v6: 8 组 16 位地址, 共 <code class=\"language-text\">2**128</code> 个可分配地址</li>\n</ul>\n<h3>TCP</h3>\n<p>Transmission Control Protocol, 传输控制协议, 传输层.</p>\n<p>位于 IP 协议之上, 基于 IP 协议提供可靠的、字节流形式的通信.</p>\n<blockquote>\n<p>传统的互联网: HTTP over TCP/IP</p>\n</blockquote>\n<h2>DNS</h2>\n<p>Domain Name System, 域名系统, 将域名转换成真实 IP.</p>\n<p>在 DNS 中, Domain Name/域名 = Host/主机名</p>\n<p>核心 DNS, 三层的树状分布式服务:</p>\n<ul>\n<li>\n<p>根域名服务器(Root DNS Server), 管理顶级域名服务器, 返回 <code class=\"language-text\">com</code> <code class=\"language-text\">net</code> 等顶级域名服务器的 IP 地址;</p>\n<ul>\n<li>全世界共 13 组, 它必须是众所周知的.</li>\n</ul>\n</li>\n<li>顶级域名服务器(Top-level DNS Server), 管理各自顶级域名下的权威域名服务器, 如 <code class=\"language-text\">com</code> 顶级域名服务器可以返回 <code class=\"language-text\">[xx.com](http://xx.com)</code> 域名服务器的 IP 地址;</li>\n<li>权威域名服务器(Authoritative DNS Server), 管理自己域名下主机的 IP 地址, 如权威域名服务器 <code class=\"language-text\">[xxx.com](http://xxx.com)</code> 可以返回 <code class=\"language-text\">[www.xxx.com](http://www.xxx.com)</code> 的 IP 地址.</li>\n</ul>\n<p>核心 DNS 系统之外的两个缓存系统:</p>\n<ul>\n<li>非权威域名服务器: 大公司、网络运营商的 DNS 服务器, 代理用户访问核心 DNS 并缓存, 如 Google 的“8.8.8.8”</li>\n<li>\n<p>操作系统缓存</p>\n<ul>\n<li>DNS 缓存</li>\n<li>hosts 文件</li>\n</ul>\n</li>\n</ul>\n<h2>URI/URL</h2>\n<p>IP 地址可以定位到主机, URI/URL 定位主机里的特定资源.</p>\n<ul>\n<li>URI: Uniform Resource Identifier, 统一资源标识符</li>\n<li>URL: Uniform Resource Locator, 统一资源定位符, 俗称的网址</li>\n</ul>\n<p>URL 是 URI 的子集, 但二者差异不大, 不用严格区分.</p>\n<p>一般的 URI 构成: <code class=\"language-text\">{协议名}://{主机名}{路径}</code></p>\n<h2>HTTPS</h2>\n<p><strong>HTTP over SSL/TLS</strong> , 即运行在 SSL/TLS 之上的 HTTP.</p>\n<p>SSL/TLS 是负责加密通信的安全协议, 处于 TCP/IP 之上、HTTP 之下, 也是可靠的传输协议.</p>\n<blockquote>\n<p>HTTPS = HTTP + SSL/TLS + TCP/IP</p>\n</blockquote>\n<h3>SSL</h3>\n<p>Secure Socket Layer, SSL3.0 时改名为 TLS 即 Transport Layer Security, 历史原因习惯称为 SSL/TLS 或 SSL.</p>\n<p>SSL 使用了许多密码学成果, 综合了对称加密、非对称加密、摘要研发、数字签名、数字证书等技术, 在不安全的环境中为通信双方创建出一个秘密、安全的传输通道.</p>\n<h2>Proxy</h2>\n<p>即代理, 处于 HTTP 的请求方和应答方之间, 可以转发客户端的请求, 也可以转发服务器的应答.</p>\n<p>分类:</p>\n<ul>\n<li>匿名代理: 完全隐匿被代理的及其</li>\n<li>透明代理: 透明开放</li>\n<li>正向代理: 靠近客户端, 代表客户端向服务器发送请求</li>\n<li>反向代理: 靠近服务端, 代表服务器响应客户端</li>\n</ul>\n<p>CDN 就是一种代理, 属于透明代理和反向代理.</p>\n<p>代理处于中间层的可以做什么?</p>\n<ul>\n<li>负载均衡(集群化)</li>\n<li>健康检查(心跳监控服务器)</li>\n<li>内容缓存</li>\n<li>安全防护(隐匿 IP、限制 IP 或流量)</li>\n<li>加密卸载(对外网使用 SSL/TLS 加密, 内网消除加密)</li>\n<li>数据过滤(修改请求或响应)</li>\n</ul>\n<h2>网络分层模型</h2>\n<h3>TCP/IP 四层模型</h3>\n<ul>\n<li>应用层: HTTP</li>\n<li>传输层: TCP/UDP</li>\n<li>网络层: IP</li>\n<li>链路层: MAC</li>\n</ul>\n<h3>OSI 七层模型</h3>\n<ul>\n<li>L7: 应用层</li>\n<li>L6: 表示层</li>\n<li>L5: 会话层</li>\n<li>L4: 传输层</li>\n<li>L3: 网络层</li>\n<li>L2: 数据链路层</li>\n<li>L1: 物理层</li>\n</ul>\n<h3>两种分层模型对比</h3>\n<p>TCP/IP 是纯软件的栈, 没有最根基的电缆、网卡等物理设备; OSI 在理论层面上描述网络更加详细、完整.</p>\n<p><a href=\"https://www.notion.so/03d6d4410c924823b2100cf4c8fd3fdd\">TCP/IP 与 OSI 网络分层模型映射关系</a></p>\n<h2>输入网址、按下回车</h2>\n<p>通过 Wireshark 抓包可验证, 当输入 <code class=\"language-text\">[localhost](http://localhost)</code> 后:</p>\n<ol>\n<li>浏览器从地址栏(或 DNS 多级缓存)取得服务器的 IP 地址和端口号</li>\n<li>浏览器用 TCP 的三次握手与服务器建立连接</li>\n<li>浏览器向服务器发送 HTTP 请求报文</li>\n<li>服务器向浏览器发送确认(ACK); 处理完后向浏览器返回 HTTP 响应报文</li>\n<li>浏览器接收到之后向服务器发送确认(ACK), 并根据 HTTP 响应渲染页面</li>\n<li>浏览器通过 TCP 四次挥手与服务器断开连接</li>\n</ol>\n<p>真实的更复杂的网络:</p>\n<ul>\n<li>根据上网方式或网络配置的不同, IP 可能是动态或静态的</li>\n<li>DNS 除了层层解析给出服务器 IP 之外, 对于静态资源还可能直接给出 CDN 服务器的 IP</li>\n<li>\n<p>目标网站的服务器为了扛住高并发, 内部也极其复杂, 如</p>\n<ul>\n<li>入口是负载均衡设备, 如四层 LVS、七层 Nginx</li>\n<li>之后是服务器集群: Memory 级缓存(Redis) → Disk 级缓存(Varnish) → 应用服务器(Tomcat、Nodejs、Django) → 数据库</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"HTTP探究之一:通识","date":"July 22, 2021","description":"HTTP中的关键名词与通识, 包括CDN、TCP/IP、DNS、PROXY、HTTPS、网络分层模型等, 并通过抓包验证HTTP的三次握手与四次挥手."}},"previous":{"fields":{"slug":"/react/"},"frontmatter":{"title":"React核心原理浅析"}},"next":{"fields":{"slug":"/npm/"},"frontmatter":{"title":"NPM/Yarn包管理策略与最佳实践"}}},"pageContext":{"id":"9daf0fea-060c-53a0-a56b-4b40ea7eded5","previousPostId":"d825e2a6-c130-5b73-b187-efe1310eb54d","nextPostId":"b30c72fb-0f1d-5dd1-ab70-c98c5fa4ac3c"}},"staticQueryHashes":["2841359383","3257411868"]}