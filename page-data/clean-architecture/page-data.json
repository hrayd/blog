{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-architecture/","result":{"data":{"site":{"siteMetadata":{"title":"按太阳穴轮刮眼眶"}},"markdownRemark":{"id":"74e32349-2480-5d36-aa8e-7f80dc4f541a","excerpt":"第一部分 概述 第 1 章 设计与架构 第 2 章 两个价值维度 第二部分 编程范式 第 3 章 编程范式总览 第 4 章 结构化编程 第 5 章 面向对象编程 第 6 章 函数式编程 第三部分 设计原则 综述 第 7 章 SRP: 单一职责原则 第 8 章 OCP: 开闭原则 第 9 章 LSP…","html":"<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0\">第一部分 概述</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC-1-%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%B6%E6%9E%84\">第 1 章 设计与架构</a></li>\n<li><a href=\"#%E7%AC%AC-2-%E7%AB%A0-%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6\">第 2 章 两个价值维度</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F\">第二部分 编程范式</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC-3-%E7%AB%A0-%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%80%BB%E8%A7%88\">第 3 章 编程范式总览</a></li>\n<li><a href=\"#%E7%AC%AC-4-%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B\">第 4 章 结构化编程</a></li>\n<li><a href=\"#%E7%AC%AC-5-%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B\">第 5 章 面向对象编程</a></li>\n<li><a href=\"#%E7%AC%AC-6-%E7%AB%A0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\">第 6 章 函数式编程</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\">第三部分 设计原则</a></p>\n<ul>\n<li><a href=\"#%E7%BB%BC%E8%BF%B0\">综述</a></li>\n<li><a href=\"#%E7%AC%AC-7-%E7%AB%A0-srp-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99\">第 7 章 SRP: 单一职责原则</a></li>\n<li><a href=\"#%E7%AC%AC-8-%E7%AB%A0-ocp-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\">第 8 章 OCP: 开闭原则</a></li>\n<li><a href=\"#%E7%AC%AC-9-%E7%AB%A0-lsp-%E6%9D%8E%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\">第 9 章 LSP: 李氏替换原则</a></li>\n<li><a href=\"#%E7%AC%AC-10-%E7%AB%A0-isp-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99\">第 10 章 ISP: 接口隔离原则</a></li>\n<li><a href=\"#%E7%AC%AC-11-%E7%AB%A0-dip-%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99\">第 11 章 DIP: 依赖反转原则</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BB%84%E4%BB%B6%E6%9E%84%E5%BB%BA%E5%8E%9F%E5%88%99\">第四部分 组件构建原则</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC-12-%E7%AB%A0-%E7%BB%84%E4%BB%B6\">第 12 章 组件</a></li>\n<li><a href=\"#%E7%AC%AC-13-%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%81%9A%E5%90%88\">第 13 章 组件聚合</a></li>\n<li><a href=\"#%E7%AC%AC-14-%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88\">第 14 章 组件耦合</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\">第五部分 软件架构</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC-15-%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\">第 15 章 什么是软件架构</a></li>\n<li><a href=\"#%E7%AC%AC-16-%E7%AB%A0-%E7%8B%AC%E7%AB%8B%E6%80%A7\">第 16 章 独立性</a></li>\n<li><a href=\"#%E7%AC%AC-17-%E7%AB%A0-%E5%88%92%E5%88%86%E8%BE%B9%E7%95%8C\">第 17 章 划分边界</a></li>\n<li><a href=\"#%E7%AC%AC-18-%E7%AB%A0-%E8%BE%B9%E7%95%8C%E5%89%96%E6%9E%90\">第 18 章 边界剖析</a></li>\n<li><a href=\"#%E7%AC%AC-19-%E7%AB%A0-%E7%AD%96%E7%95%A5%E4%B8%8E%E5%B1%82%E6%AC%A1\">第 19 章 策略与层次</a></li>\n<li><a href=\"#%E7%AC%AC-20-%E7%AB%A0-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91\">第 20 章 业务逻辑</a></li>\n<li><a href=\"#%E7%AC%AC-21-%E7%AB%A0-%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\">第 21 章 尖叫的软件架构</a></li>\n<li><a href=\"#%E7%AC%AC-22-%E7%AB%A0-%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84\">第 22 章 整洁架构</a></li>\n<li><a href=\"#%E7%AC%AC-23-%E7%AB%A0-%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1\">第 23 章 展示器和谦卑对象</a></li>\n<li><a href=\"#%E7%AC%AC-24-%E7%AB%A0-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C\">第 24 章 不完全边界</a></li>\n<li><a href=\"#%E7%AC%AC-25-%E7%AB%A0-%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C\">第 25 章 层次与边界</a></li>\n<li><a href=\"#%E7%AC%AC-26-%E7%AB%A0-main-%E7%BB%84%E4%BB%B6\">第 26 章 Main 组件</a></li>\n<li><a href=\"#%E7%AC%AC-27-%E7%AB%A0-%E6%9C%8D%E5%8A%A1-%E5%AE%8F%E8%A7%82%E4%B8%8E%E5%BE%AE%E8%A7%82\">第 27 章 服务: 宏观与微观</a></li>\n<li><a href=\"#%E7%AC%AC-28-%E7%AB%A0-%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C\">第 28 章 测试边界</a></li>\n<li><a href=\"#%E7%AC%AC-29-%E7%AB%A0-%E6%95%B4%E6%B4%81%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BB%93%E6%9E%84\">第 29 章 整洁的嵌入式结构</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\">第六部分 实现细节</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC-30-%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AA%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\">第 30 章 数据库只是实现细节</a></li>\n<li><a href=\"#%E7%AC%AC-31-%E7%AB%A0-web-%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\">第 31 章 Web 是实现细节</a></li>\n<li><a href=\"#%E7%AC%AC-32-%E7%AB%A0-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\">第 32 章 应用程序框架是实现细节</a></li>\n<li><a href=\"#%E7%AC%AC-33-%E7%AB%A0-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90-%E8%A7%86%E9%A2%91%E9%94%80%E5%94%AE%E7%BD%91%E7%AB%99\">第 33 章 案例分析: 视频销售网站</a></li>\n<li><a href=\"#%E7%AC%AC-34-%E7%AB%A0-%E6%8B%BE%E9%81%97\">第 34 章 拾遗</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\">思维导图</a></li>\n</ul>\n</div>\n<h2 id=\"第一部分-概述\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0\" aria-label=\"第一部分 概述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一部分 概述</h2>\n<h3 id=\"第-1-章-设计与架构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-1-%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%B6%E6%9E%84\" aria-label=\"第 1 章 设计与架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 1 章 设计与架构</h3>\n<ul>\n<li>随着软件版本的更迭: 需要的工程师人数越来越多、人均生产效率显著降低(以同期代码行数作为统计)、每行代码的变更成本显著增高.</li>\n<li>对于重构的过于乐观: 为了快速上线而容忍混乱的代码, 忽略软件架构, 而寄希望于未来的重构工作. 事实上, 新功能源源不断, 混乱的架构又会导致新功能的开发成本急速上升, 生产效率持续下降, 陷入恶性循环, 导致重构的成本越来越大, 重构的时机几乎不会存在.</li>\n</ul>\n<h3 id=\"第-2-章-两个价值维度\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-2-%E7%AB%A0-%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6\" aria-label=\"第 2 章 两个价值维度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 2 章 两个价值维度</h3>\n<ul>\n<li>\n<p>两个价值纬度</p>\n<ul>\n<li>\n<ol>\n<li>系统行为, 即软件功能是否满足需求</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>系统架构, 即软件是否足够灵活</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>何者更重要?</p>\n<ul>\n<li>是系统正常工作更重要, 还是系统易于修改更重要?</li>\n<li>对于业务部门来说, 答案一般是前者, 而一旦开发人员也选择了前者, 紧接着就会面临源源不断的新增需求和需求变更, 导致生产效率直线下降.</li>\n<li>所以对于开发人员来说, 系统架构大于系统行为: 只要保持系统的灵活性, 系统行为总会以平和的方式得到满足.</li>\n<li>开发团队同市场、销售、运营团队一样需要“长期抗争”, 保护系统的灵活性/可维护性, 是开发团队的职责.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二部分-编程范式\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F\" aria-label=\"第二部分 编程范式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第二部分 编程范式</h2>\n<h3 id=\"第-3-章-编程范式总览\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-3-%E7%AB%A0-%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%80%BB%E8%A7%88\" aria-label=\"第 3 章 编程范式总览 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 3 章 编程范式总览</h3>\n<ul>\n<li>\n<p>三大编程范式</p>\n<ul>\n<li>结构化编程</li>\n<li>对程序控制权的直接转移进行了限制和规范</li>\n<li>限制了 goto: 使用 if、for、while 等流程控制</li>\n<li>面向对象编程</li>\n<li>对程序控制权的间接转移进行了限制和规范</li>\n<li>限制了函数指针</li>\n<li>函数式编程</li>\n<li>对程序中的赋值进行了限制和规范</li>\n<li>限制了赋值语句</li>\n</ul>\n</li>\n<li>\n<p>编程范式与架构</p>\n<ul>\n<li>架构的三大关注点</li>\n<li>功能性</li>\n<li>组件独立性</li>\n<li>数据管理</li>\n<li>编程范式的作用</li>\n<li>结构化编程: 实现逻辑功能</li>\n<li>面向对象: 封装与多态</li>\n<li>函数式: 规范数据存放与访问权限</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-4-章-结构化编程\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-4-%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B\" aria-label=\"第 4 章 结构化编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 4 章 结构化编程</h3>\n<ul>\n<li>\n<p>可推导性</p>\n<ul>\n<li>三种基本结构</li>\n<li>顺序结构</li>\n<li>分支结构</li>\n<li>循环结构</li>\n<li>可以用三种基本结构构造出任何程序</li>\n</ul>\n</li>\n<li>不受限制的直接控制转移语句——goto 是有害的, 可被三种基本结构替代</li>\n<li>结构化编程范式使得可以将大型系统设计拆分为模块和组件, 然后可递归拆分为更小的、可证明的函数</li>\n<li>结构化编程范式促使将一段程序递归降解为一系列小单元, 程序的测试过程即证伪过程.</li>\n</ul>\n<h3 id=\"第-5-章-面向对象编程\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-5-%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B\" aria-label=\"第 5 章 面向对象编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 5 章 面向对象编程</h3>\n<ul>\n<li>\n<p>面向对象编程语言</p>\n<ul>\n<li>封装性: 较 C 而言实际上减弱了封装性</li>\n<li>继承性: 提供了一定便利,但没有开创出新</li>\n<li>多态: C 本来就有,只是提供了安全性和便利</li>\n</ul>\n</li>\n<li>\n<p>面向对象的多态</p>\n<ul>\n<li>插件式架构</li>\n<li>程序应与设备无关</li>\n<li>依赖反转</li>\n<li>原本: 层层依赖-上层组件依赖下层组件</li>\n<li>多态: 上层组件提供需求接口, 底层组件实现接口</li>\n<li>例子</li>\n<li>原本: 业务逻辑引入(依赖)用户界面和数据库</li>\n<li>应用多态: 用户界面和数据库作为业务逻辑的插件,从而可以各自独立部属</li>\n</ul>\n</li>\n<li>\n<p>架构师眼中的面向对象</p>\n<ul>\n<li>以多态为手段来对源代码中的依赖关系进行控制, 构建出某种插件式架构, 让高层策略性组件和底层实现性组件相分离, 底层组件可以作为插件, 独立于高层组件进行开发和部属</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-6-章-函数式编程\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-6-%E7%AB%A0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\" aria-label=\"第 6 章 函数式编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 6 章 函数式编程</h3>\n<ul>\n<li>变量不可变</li>\n<li>\n<p>不可变性与软件架构</p>\n<ul>\n<li>如果变量不可变, 一切并发问题都会不复存在: 竞争、死锁、并发更新等.</li>\n<li>不可变性是否可行? 如果能忽略存储器和处理器的速度限制,则可行; 否则只有一定情况下可行</li>\n</ul>\n</li>\n<li>\n<p>可变形隔离</p>\n<ul>\n<li>一个架构设计良好的应用程序应该将状态修改的部分和不需要修改状态的部分隔离成单独的组件，然后用合适的机制来保护可变量</li>\n<li>软件架构师应该着力于将大部分处理逻辑都归于不可变组件中，可变状态组件的逻辑应该越少越好</li>\n</ul>\n</li>\n<li>\n<p>事件溯源</p>\n<ul>\n<li>如果有足够大的存储量和处理能力，应用程序就可以用完全不可变的、纯函数式的方式来编程</li>\n<li>只存储事务记录, 不存储具体状态, 通过计算所有事务来获取当前状态</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三部分-设计原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\" aria-label=\"第三部分 设计原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第三部分 设计原则</h2>\n<h3 id=\"综述\" style=\"position:relative;\"><a href=\"#%E7%BB%BC%E8%BF%B0\" aria-label=\"综述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>综述</h3>\n<ul>\n<li>\n<p>构建中层结构</p>\n<ul>\n<li>使软件可容忍被改动</li>\n<li>使软件更容易被理解</li>\n<li>构建可复用的组件</li>\n</ul>\n</li>\n<li>\n<p>SOLID 原则</p>\n<ul>\n<li>SRP: 单一职责原则——每个模块有且只有一个被改变的理由</li>\n<li>OCP: 开闭原则——允许通过新增代码来扩展功能,尽量减少代码修改</li>\n<li>LSP: 李氏替换原则——遵守同一约定的组件可相互替换</li>\n<li>ISP: 接口隔离原则——在设计中避免不必要的依赖</li>\n<li>DIP: 依赖反转原则——实现底层细节的代码应依赖高层策略性代码,而非反向依赖</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-7-章-srp-单一职责原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-7-%E7%AB%A0-srp-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99\" aria-label=\"第 7 章 srp 单一职责原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 7 章 SRP: 单一职责原则</h3>\n<ul>\n<li>不仅仅是“每个模块只做一件事”</li>\n<li>任何一个软件模块都应该只对某一类行为者负责</li>\n</ul>\n<h3 id=\"第-8-章-ocp-开闭原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-8-%E7%AB%A0-ocp-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\" aria-label=\"第 8 章 ocp 开闭原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 8 章 OCP: 开闭原则</h3>\n<ul>\n<li>易于扩展(新增代码),抗拒修改</li>\n<li>\n<p>实现方法</p>\n<ul>\n<li>\n<ol>\n<li>将需求分组,即 SRP</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>调整分组之间的依赖,即 DIP</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果 A(Father)组件不想被 B(Child)组件发生的修改所影响,那么就让 B 依赖于 A.</li>\n<li>分层设计: 高层组件更核心、更封闭, 低层依赖于高层.</li>\n</ul>\n<h3 id=\"第-9-章-lsp-李氏替换原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-9-%E7%AB%A0-lsp-%E6%9D%8E%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\" aria-label=\"第 9 章 lsp 李氏替换原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 9 章 LSP: 李氏替换原则</h3>\n<ul>\n<li>子类型可以替代父类型被调用/使用, 即继承关系</li>\n<li>LSP 演变为更广泛的、指导接口与实现方式的设计原则</li>\n<li>反例: 当核心业务逻辑出现无法避免的例外情况时,避免在核心组件中进行特殊情况判断,而应该使用一个额外的调度组件来处理特殊情况</li>\n</ul>\n<h3 id=\"第-10-章-isp-接口隔离原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-10-%E7%AB%A0-isp-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99\" aria-label=\"第 10 章 isp 接口隔离原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 10 章 ISP: 接口隔离原则</h3>\n<ul>\n<li>尽量避免多个行为依赖并操作同一个接口: 在中间再做一层封装进行隔离.</li>\n<li>尽量减少不必要的依赖, 第 13 章再继续探讨更多细节</li>\n</ul>\n<h3 id=\"第-11-章-dip-依赖反转原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-11-%E7%AB%A0-dip-%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99\" aria-label=\"第 11 章 dip 依赖反转原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 11 章 DIP: 依赖反转原则</h3>\n<ul>\n<li>在源代码层次上只引用包含接口、抽象类或其他抽象类型声明的源文件, 而不引用任何具体实现.</li>\n<li>\n<p>编码守则</p>\n<ul>\n<li>多使用抽象接口,避免使用多变的具体实现类</li>\n<li>不要在具体实现类上创建衍生类</li>\n<li>不要覆盖(override)包含具体实现的函数</li>\n<li>避免在代码中写入任何具体实现相关或其他容易变动的事务的名字</li>\n</ul>\n</li>\n<li>使用抽象工厂模式创建对象</li>\n</ul>\n<h2 id=\"第四部分-组件构建原则\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BB%84%E4%BB%B6%E6%9E%84%E5%BB%BA%E5%8E%9F%E5%88%99\" aria-label=\"第四部分 组件构建原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四部分 组件构建原则</h2>\n<h3 id=\"第-12-章-组件\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-12-%E7%AB%A0-%E7%BB%84%E4%BB%B6\" aria-label=\"第 12 章 组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 12 章 组件</h3>\n<ul>\n<li>\n<p>组件是软件在部属过程中的最小单元</p>\n<ul>\n<li>在编译运行语言中是一组二进制文件;</li>\n</ul>\n<p>在解释运行语言中是一组源代码文件</p>\n</li>\n<li>设计良好的组件: 独立部署、单独开发</li>\n<li>组件概念的历史: 动态链接文件</li>\n<li>现状: 组件化的插件式架构</li>\n</ul>\n<h3 id=\"第-13-章-组件聚合\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-13-%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%81%9A%E5%90%88\" aria-label=\"第 13 章 组件聚合 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 13 章 组件聚合</h3>\n<ul>\n<li>问题: 哪些类应该被合成一个组件?</li>\n<li>\n<p>基本原则</p>\n<ul>\n<li>\n<p>REP: 复用/发布等同原则</p>\n<pre><code>- 软件复用的最小粒度应等同于其发布的最小粒度\n- 被复用的组件应有明确的发布版本号、适当的通知和发布文档\n- 组件中包含的类与模块也应该可以同时发布,共享相同的版本号和版本跟踪,被包含在发布文档中.\n</code></pre>\n</li>\n<li>\n<p>CCP: 共同闭包原则</p>\n<pre><code>- 将会同时修改、并且为相同目的而修改的类放入同一组件; 反之放入不同组件.\n- SRP原则在组件层面的阐述\n- 一个组件应该只有一个变更原因;\n</code></pre>\n</li>\n</ul>\n<p>一次变更最好都体现在一个组件中 - 一般来说, 可维护性比可复用性重要得多</p>\n<ul>\n<li>\n<p>CRP: 共同复用原则</p>\n<pre><code>- 将经常共同复用的类和模块放入同一个组件\n- 不是紧密相连的类不应被放入同一组件\n- 是ISP原则的普适版\n</code></pre>\n</li>\n</ul>\n</li>\n<li>组件聚合原则张力图</li>\n<li>\n<p>REP 和 CCP 使组件更大, CRP 使组件更小, 架构师的任务就是在三原则中进行取舍, 并且是随着项目状态逐步调整</p>\n<ul>\n<li>项目早期一般偏向右侧, 主要牺牲复用性</li>\n<li>随着项目逐渐成熟,其他项目对其产生依赖,会逐渐向左侧滑动</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-14-章-组件耦合\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-14-%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88\" aria-label=\"第 14 章 组件耦合 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 14 章 组件耦合</h3>\n<ul>\n<li>\n<p>无依赖环原则</p>\n<ul>\n<li>解决方案</li>\n<li>\n<ol>\n<li>将项目划分为可独立发布的组件</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>组件独立发布,打版本号并通知其他成员</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>其他开发者基于组件公开发布的版本进行开发,并可以选择是否采用新版本</li>\n</ol>\n</li>\n<li>组件依赖图: 有向无环图(DAG)</li>\n<li>可以直观地判断出某个组件变更的影响范围</li>\n<li>无环: 从任意节点开始沿依赖线都回不到起始点</li>\n<li>发布过程从下至上进行编译、测试、发布</li>\n<li>循环依赖: 组件依赖图存在环, 组件的独立维护工作以及单元测试、发布流程都将十分困难</li>\n<li>消除循环依赖</li>\n<li>\n<ol>\n<li>应用依赖反转原则(DIP), 将环形依赖反转</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>创建新的上层组件, 将相互依赖的类进行抽象提取</li>\n</ol>\n</li>\n<li>当循环依赖出现时,必须立刻进行消除,调整组件结构</li>\n<li>组件结构图的构建</li>\n<li>不可能在系统构建之初就被完美设计, 因为它不是描述软件功能的,而是软件构建性和维护性的地图</li>\n<li>隔离频繁的变更: 将稳定的高价值组件与常变的组件进行隔离</li>\n<li>随着项目的逻辑设计一起扩张和演进</li>\n</ul>\n</li>\n<li>\n<p>稳定依赖原则(SDP)</p>\n<ul>\n<li>稳定性</li>\n<li>\n<p>直观上</p>\n<ul>\n<li>如果组件不依赖其他组件, 或被多个其他组件依赖, 则是稳定的组件.</li>\n<li>如果组件依赖多个组件, 则是不稳定的</li>\n</ul>\n</li>\n<li>\n<p>指标</p>\n<ul>\n<li>I(不稳定性) = FanOut / (FanIn + FanOut)</li>\n<li>FanIn: 入向依赖,组件内部类被外部类依赖的数量</li>\n<li>FanOut: 出向依赖, 组件内部类依赖外部类的数量</li>\n</ul>\n</li>\n<li>要求: 每个组件的 I 指标都大于其所依赖组件的 I 指标. 即: 越高层的组件越稳定.</li>\n<li>高阶组件 >> I=0</li>\n</ul>\n</li>\n<li>\n<p>稳定抽象原则(SAP)</p>\n<ul>\n<li>组件的抽象化程度应与其稳定性保持一致,</li>\n<li>如何使一个趋于无限稳定(I=0)的组件接收变更?</li>\n<li>抽象类(与接口)</li>\n<li>指标</li>\n<li>\n<p>A(抽象化程度) = Na / Nc</p>\n<ul>\n<li>Na: 组件中类的数量</li>\n<li>Nc: 组件中抽象类和接口的数量</li>\n<li>0 表示没有抽象类; 1 表示只有抽象类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>SDP 与 SAP</p>\n<ul>\n<li>I/A 图</li>\n<li>最稳定、包含无限抽象类的组件位于左上角(0,1)</li>\n<li>最不稳定、最具体的组件位于右下角(1,0)</li>\n<li>主序列、痛苦区与无用区</li>\n<li>\n<p>痛苦区: 稳定且具体, 涉及很多具体业务但又难以修改</p>\n<ul>\n<li>典型: 数据库的表结构、工具型类库</li>\n</ul>\n</li>\n<li>无用区: 无限抽象、但没有被其他组件依赖, 多为无用代码</li>\n<li>\n<p>主序列线: 合适的位置</p>\n<ul>\n<li>尽量让组件贴近主序列线</li>\n<li>最优位置是线的两端</li>\n</ul>\n</li>\n<li>D 指标 = |A + I - 1|</li>\n<li>组件与主序列线的距离: 0 表示在主序列上; 1 表示最远位置</li>\n<li>可用“D 指标小于 xx”来指导组件的重构</li>\n<li>\n<p>用途</p>\n<ul>\n<li>重点分析 D 指标处于平均值的标准差之外的组件: 要么过于抽象但依赖不足, 要么过于具体而被依赖太多</li>\n<li>按时间跟踪每个组件的 D 指标, 及时发现组件架构隐患</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五部分-软件架构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\" aria-label=\"第五部分 软件架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第五部分 软件架构</h2>\n<h3 id=\"第-15-章-什么是软件架构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-15-%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\" aria-label=\"第 15 章 什么是软件架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 15 章 什么是软件架构</h3>\n<ul>\n<li>软件架构师: 坚持一线程序员、更多的编程任务</li>\n<li>实质: 如何将系统切分成组件, 并安排好组件之间的排列关系及互相通信的方式.</li>\n<li>\n<p>目的: 更好地对组件进行研发、部属、运行及维护</p>\n<ul>\n<li>开发: 当开发人员组成复杂、系统体量较大时, 清晰的组件和稳定的接口是开发顺利的必要条件</li>\n<li>部属: 一键式的轻松部属应该是设计软件架构的目标.</li>\n<li>微服务架构虽然有利于开发, 但要考虑其部属和通信带来的隐患</li>\n<li>运行: 软件架构对运行的影响较小, 但架构应该将系统中的用例、功能和核心行为设为开发者可见的一级实体, 简化理解</li>\n<li>维护: 成本最高的部分</li>\n<li>\n<p>主要成本</p>\n<ul>\n<li>探秘: 对现系统的挖掘, 确定新增功能或被修复问题的最佳位置和方式</li>\n<li>风险: 进行修改时, 对可能衍生出新问题的风险成本</li>\n</ul>\n</li>\n<li>通过架构设计(切分、隔离组件)降低以上成本</li>\n</ul>\n</li>\n<li>\n<p>策略: 保持可选项</p>\n<ul>\n<li>软件系统的主要元素</li>\n<li>策略: 业务规则与操作过程, 是系统的价值所在</li>\n<li>细节: 用户、程序员或第三方与策略进行交互的行为, 包括 I/O 设备、数据库、Web 系统、服务器、框架、交互协议等</li>\n<li>架构: 以策略为基本元素, 让细节与策略脱离关系, 并允许在具体决策过程中推迟或延迟与细节相关的内容</li>\n<li>方法: 做高层的策略决策时,尽可能摆脱并推迟对细节的决策(如数据库、框架和设备的选型等)</li>\n<li>\n<p>好处</p>\n<ul>\n<li>对策略的信息越多, 对细节的决策越合理</li>\n<li>保持可选项, 可尝试不同的细节决策</li>\n</ul>\n</li>\n<li>示范: 设备无关性的应用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-16-章-独立性\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-16-%E7%AB%A0-%E7%8B%AC%E7%AB%8B%E6%80%A7\" aria-label=\"第 16 章 独立性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 16 章 独立性</h3>\n<ul>\n<li>\n<p>架构的支持目标</p>\n<ul>\n<li>用例: 架构的首要目标是为所有系统用例提供支持</li>\n<li>运行: 架构需要支持系统的运行条件</li>\n<li>如为了支持系统的吞吐量和响应时间要求, 使用微服务或多进程、多线程架构</li>\n<li>开发: 将系统切分为隔离良好、可独立开发的组件</li>\n<li>部属: 设计目标是“一键部属”, 减少部属脚本与配置文件</li>\n</ul>\n</li>\n<li>挑战: 无法预知所有用例、运行条件、开发团队结构和部属需求; 并且这些需求会发生变化</li>\n<li>\n<p>策略: 保留可选项</p>\n<ul>\n<li>用例: 解耦模式</li>\n<li>\n<p>水平分层解耦</p>\n<ul>\n<li>UI 界面</li>\n<li>应用独有的业务逻辑</li>\n<li>领域通用的业务逻辑</li>\n<li>数据库</li>\n<li>...</li>\n</ul>\n</li>\n<li>垂直解耦: 按用例(如新增、删除)对系统进行垂直切分, 每个用例都可能涉及 UI 界面、业务逻辑和数据库</li>\n<li>运行: 按用例解耦后, 可以将高吞吐量和低吞吐量的组件、UI 和数据库等按需分开部属在不同的环境中</li>\n<li>开发: 解耦后可按水平分层或用例分别独立开发</li>\n<li>部属: 解耦后可独立部署、热更新等</li>\n</ul>\n</li>\n<li>\n<p>重复的代码不一定是坏事</p>\n<ul>\n<li>用例之间的重复代码: 可能之后的变更速率和变更缘由会完全不同, 必须加倍小心地避免在用例之间复用代码</li>\n<li>水平分层的重复代码: 当数据库结构与 UI 界面的数据接口非常相似时(几乎一定是表面性的重复),也不要省略中间的视图模型,要保持水平分层之间的隔离</li>\n</ul>\n</li>\n<li>\n<p>解耦</p>\n<ul>\n<li>模式</li>\n<li>水平分层</li>\n<li>用例解耦</li>\n<li>解耦层次</li>\n<li>源码层次: 源代码模块之间通过函数调用来交互</li>\n<li>部属层次: 部属单元(jar 包、DLL、共享库)之间通过函数调用、跨进程通信、socket 或共享内存通信</li>\n<li>服务层次: 组件之间仅通过网络数据包通信</li>\n<li>解决方案</li>\n<li>\n<p>单一层次</p>\n<ul>\n<li>源码层次: 适合系统只运行在一台服务器上(单体结构), 但之后可能需要进行部属层次和服务层次的解耦</li>\n<li>服务层次: 资源成本、研发成本、人力成本高昂</li>\n</ul>\n</li>\n<li>\n<p>动态层次</p>\n<ul>\n<li>源码层次 -> 部属层次 -> 服务层次</li>\n<li>根据系统开发和部属需要进行变更</li>\n</ul>\n</li>\n<li>良好的架构</li>\n<li>允许从单体结构向可部属单元、独立的服务或微服务进行转变</li>\n<li>允许从部属和服务层次回退到单体结构</li>\n<li>在层次转变过程中保持系统的大部分源码不受影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-17-章-划分边界\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-17-%E7%AB%A0-%E5%88%92%E5%88%86%E8%BE%B9%E7%95%8C\" aria-label=\"第 17 章 划分边界 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 17 章 划分边界</h3>\n<ul>\n<li>划分边界的目的: 尽量将一些决策延后, 并确保这些决策不对核心业务逻辑产生干扰</li>\n<li>\n<p>系统最消耗人力资源的问题: 耦合</p>\n<ul>\n<li>尤其是与系统业务需求无关的决策造成的耦合, 如过早决策系统框架、数据库、服务器等</li>\n</ul>\n</li>\n<li>\n<p>范例分析</p>\n<ul>\n<li>\n<ol>\n<li>过早地做出决策去适应一个并不存在的大型服务器集群环境,导致开发成本急剧上升.</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>过早地采用一整套域对象服务体系,需要将一整套服务全部运行起来才能进行开发,导致开发效率急剧下降</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>成功案例: 延后数据库相关决策,采用一种与数据库无关的设计,并预留空的数据访问方法,使得开发过程中不需要面对表结构问题、查询问题、数据库服务器问题、密码问题、链接时间等一系列数据库带来的问题</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>在何处划分?</p>\n<ul>\n<li>GUI 与业务逻辑之间</li>\n<li>数据库与 GUI 之间</li>\n<li>数据库与业务逻辑之间</li>\n</ul>\n</li>\n<li>\n<p>插件式架构</p>\n<ul>\n<li>核心业务逻辑与其他组件隔离</li>\n<li>其他组件要么是可去掉的, 要么是有多种实现的</li>\n<li>GUI 与数据库都应可作为插件进行替换</li>\n<li>是单一职责原则(SRP)的具体实现</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-18-章-边界剖析\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-18-%E7%AB%A0-%E8%BE%B9%E7%95%8C%E5%89%96%E6%9E%90\" aria-label=\"第 18 章 边界剖析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 18 章 边界剖析</h3>\n<ul>\n<li>跨边界调用: 边界一侧的函数调用另一侧的函数,并同时传递数据</li>\n<li>\n<p>单体结构/源码层次</p>\n<ul>\n<li>单体结构: 各组件合并产生一个单独的可执行文件</li>\n<li>一般利用某种动态形式的多态来管理内部依赖关系</li>\n<li>最简单的调用形式: 低层客户端调用高层服务函数</li>\n<li>当高层组件需要调用低层组件中的服务时,可以运行动态形式的多态来反转依赖关系</li>\n<li>高层组件提供接口</li>\n<li>低层组件实现接口并被高层组件调用</li>\n</ul>\n</li>\n<li>\n<p>部属层次</p>\n<ul>\n<li>跨边界调用方式与单体结构类似, 只是普通的函数调用.</li>\n</ul>\n</li>\n<li>线程模型: 单体结构和按部属层次划分的组件都可以采用线程模型</li>\n<li>\n<p>本地进程</p>\n<ul>\n<li>不同进程拥有不同的地址空间, 无法共享内存</li>\n<li>进程间通信</li>\n<li>用某种独立的内存区域实现共享</li>\n<li>socket(最常见)</li>\n<li>一些操作系统提供的方式,如共享邮件、消息队列</li>\n<li>进程间的隔离策略与单体结构类似, 依赖关系始终指向更高层次组件</li>\n<li>高层进程源码中不应包含低层进程的名称、物理地址或注册表键名.</li>\n<li>设计目标: 低层进程作为高层进程的插件</li>\n<li>进程间通信成本相对较高,需要谨慎控制通信次数</li>\n</ul>\n</li>\n<li>\n<p>服务</p>\n<ul>\n<li>系统架构中最强的边界形式</li>\n<li>不依赖于具体的运行位置,始终假设服务之间的通信全部通过网络进行</li>\n<li>跨边界通信速度缓慢,尽可能控制通信次数并适应高延时情况</li>\n<li>目标: 低层服务成为高层服务的插件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-19-章-策略与层次\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-19-%E7%AB%A0-%E7%AD%96%E7%95%A5%E4%B8%8E%E5%B1%82%E6%AC%A1\" aria-label=\"第 19 章 策略与层次 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 19 章 策略与层次</h3>\n<ul>\n<li>\n<p>策略</p>\n<ul>\n<li>程序 = 策略语句的集合</li>\n<li>策略语句</li>\n<li>描述计算部分的业务逻辑</li>\n<li>描述计算报告的格式</li>\n<li>描述输入数据的校验策略</li>\n<li>架构设计</li>\n<li>将策略语句彼此分离, 按变更方式(原因、时间、层次)重新分组(组件)</li>\n<li>将组件重新组合为一个有向无环图, 低层依赖于高层</li>\n</ul>\n</li>\n<li>\n<p>层次</p>\n<ul>\n<li>按输入与输出之间的距离来分层, 距离越远层次越高</li>\n<li>高层提供接口, 低层实现接口并依赖高层</li>\n</ul>\n</li>\n<li>\n<p>涉及原则</p>\n<ul>\n<li>单一职责原则（SRP）、开闭原则（OCP）、共同闭包原则（CCP）、依赖反转原则（DIP）、稳定依赖原则（SDP）以及稳定抽象原则（SAP）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-20-章-业务逻辑\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-20-%E7%AB%A0-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91\" aria-label=\"第 20 章 业务逻辑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 20 章 业务逻辑</h3>\n<ul>\n<li>\n<p>应用程序</p>\n<ul>\n<li>业务逻辑</li>\n<li>插件</li>\n</ul>\n</li>\n<li>\n<p>业务实体(Entity)</p>\n<ul>\n<li>构成</li>\n<li>关键业务逻辑</li>\n<li>关键业务数据: 包含或容易访问</li>\n<li>接口</li>\n<li>实现关键业务逻辑的函数</li>\n<li>操作关键业务数据的属性或函数</li>\n</ul>\n</li>\n<li>\n<p>用例(Usecase)</p>\n<ul>\n<li>定义输入、输出及产生输出的过程</li>\n<li>描述某种特定应用场景下的业务逻辑</li>\n<li>用例属于低层概念, 依赖于业务实体</li>\n<li>只描述业务逻辑, 不描述交互方式</li>\n</ul>\n</li>\n<li>\n<p>请求/响应模型</p>\n<ul>\n<li>输入输出都是简单的数据结构</li>\n<li>不派生任何 HTTP 接口和用户界面细节</li>\n<li>避免引用业务实体, 即使二者有很多相同的数据</li>\n<li>因为两个对象会以不同原因和速率发生变更</li>\n<li>会违反共同闭包原则(CCP)和单一职责原则(SRP)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-21-章-尖叫的软件架构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-21-%E7%AB%A0-%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\" aria-label=\"第 21 章 尖叫的软件架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 21 章 尖叫的软件架构</h3>\n<ul>\n<li>\n<p>架构设计的主题应该是业务, 而非架构/框架本身</p>\n<ul>\n<li>推荐阅读《Object Oriented Software Engineering: A Use Case Driven Approach》</li>\n<li>系统的架构图基于用例, 而不是框架</li>\n</ul>\n</li>\n<li>\n<p>良好的架构</p>\n<ul>\n<li>围绕用例, 可以在脱离框架、工具和使用环境的情况下完整地描述用例.</li>\n<li>尽可能允许推迟和延后决定细节: 框架、数据库、Web 服务等. 并且容易改变</li>\n</ul>\n</li>\n<li>\n<p>Web 只是一种交付手段, 而非架构</p>\n<ul>\n<li>系统应尽量保持它与交付方式之间的无关性</li>\n<li>应该可以将应用程序交付成命令行程序、Web 程序、富客户端程序、Web 服务程序等任何一种形式</li>\n</ul>\n</li>\n<li>\n<p>框架是工具而非信条</p>\n<ul>\n<li>待着怀疑的态度审视每一个框架</li>\n<li>权衡使用框架、保护系统</li>\n<li>保持对系统用例的关注,避免让框架主导架构设计</li>\n</ul>\n</li>\n<li>\n<p>可测试的架构设计</p>\n<ul>\n<li>架构设计应围绕用例展开, 应该可以在不依赖框架、Web 服务、数据库的情况下对用例进行单元测试</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-22-章-整洁架构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-22-%E7%AB%A0-%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84\" aria-label=\"第 22 章 整洁架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 22 章 整洁架构</h3>\n<ul>\n<li>\n<p>几种架构</p>\n<ul>\n<li>六边形架构/端口与适配器架构</li>\n<li>《Growing Object Oriented Software with Tests》</li>\n<li>DCI 架构</li>\n<li>BEC 架构</li>\n<li>《Object Oriented Software Engineering: A Use Case Driven Approach》</li>\n</ul>\n</li>\n<li>设计目标: 按照不同的关注点对软件进行切割</li>\n<li>\n<p>特点</p>\n<ul>\n<li>独立于框架: 框架作为工具而非依赖</li>\n<li>可被测试: 脱离框架、数据库、Web 服务测试</li>\n<li>独立于 UI: UI 变更很容易</li>\n<li>独立于数据库: 轻易替换数据库</li>\n<li>独立于外部机构: 不依赖任何外部接口</li>\n</ul>\n</li>\n<li>\n<p>整洁架构</p>\n<ul>\n<li>分层: 中心为高层</li>\n<li>内层: 策略</li>\n<li>外层: 机制</li>\n<li>依赖关系: 由外指向内</li>\n<li>业务实体: 封装关键业务逻辑, 可以是带有方法的对象或一组数据结构和函数的集合</li>\n<li>用例: 特定应用场景下的业务逻辑, 封装了系统的所有用例, 引导业务实体的数据流</li>\n<li>接口适配器: 一组数据转换器, 负责在内部(用例和业务实体)和外部(数据库、Web)之间进行数据转换, 本层内部的同心圆不依赖任何数据库</li>\n<li>框架与驱动程序: 包含所有实现细节(Web 和数据库等), 实现不影响内层, 只有一些与内层沟通的黏合性代码</li>\n<li>跨越边界: 如图像右下角, 控制流从控制器开始, 穿过用例, 最后执行展示器代码</li>\n<li>当用例代码需要调用展示器时, 不能违反依赖关系直接调用, 可以使用依赖反转原则(DIP)来解决.</li>\n<li>跨越边界的数据: 数据结构应独立、简单, 避免直接传递业务实体或数据库记录对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-23-章-展示器和谦卑对象\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-23-%E7%AB%A0-%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1\" aria-label=\"第 23 章 展示器和谦卑对象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 23 章 展示器和谦卑对象</h3>\n<ul>\n<li>谦卑对象模式: 按照是否难以测试将行为拆分成两组模块, 其中包含系统中所有难以测试的行为的一组模块称为谦卑(Humble)组.</li>\n<li>\n<p>谦卑对象模式应用</p>\n<ul>\n<li>展示器与视图</li>\n<li>GUI 难以进行单元测试, 但可以利用谦卑对象模式将 GUI 拆分成展示器与视图两部分</li>\n<li>视图: 难以测试的谦卑对象, 代码越简单越好, 只负责将数据填充到 GUI 而不做任何处理</li>\n<li>展示器: 可测试的对象, 负责接收和处理数据, 以便视图将其呈现在屏幕上</li>\n<li>数据库网关</li>\n<li>用例交互器与数据库中间的组件, 是一个多态接口, 包含了应用程序在数据库上要执行的所有操作</li>\n<li>SQL 不应出现在用例层代码中, 需要由数据库网关接口提供, 其实现由数据库层来负责, 这些实现(SQL 或其他数据库提供的接口)属于谦卑对象</li>\n<li>\n<p>数据映射器</p>\n<ul>\n<li>ORM(对象关系映射器)只是将数据从关系数据库加载到了对应的数据结构中, 属于数据库层, 是在数据库和数据库网关接口之间构建了一种谦卑对象的边界</li>\n</ul>\n</li>\n<li>服务监听器: 从服务接口中接收并处理数据, 使得数据可以跨服务边界传输. 也属于谦卑对象模式</li>\n</ul>\n</li>\n<li>谦卑对象模式将最难以测试的跨边界的数据交互行为分割出来, 可以大幅提高整个系统的可测试性.</li>\n</ul>\n<h3 id=\"第-24-章-不完全边界\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-24-%E7%AB%A0-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C\" aria-label=\"第 24 章 不完全边界 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 24 章 不完全边界</h3>\n<ul>\n<li>\n<p>架构边界的挑战——\n引入不完全边界的原因</p>\n<ul>\n<li>构建完整的架构边界成本极高: 设计双向多态边界接口、输入输出数据结构、依赖关系管理、分割组件等</li>\n<li>为了应对将来可能的需要, 希望预留边界</li>\n<li>违背YAGNI原则(You aren't going to need it, 不要预测未来的需要)</li>\n</ul>\n</li>\n<li>\n<p>构建不完全边界</p>\n<ul>\n<li>省掉最后一步: 将系统分割为可独立编译、部属的组件之后, 再将其合并起来构建成一个组件</li>\n<li>设计工作量和代码量与构建完整边界相同</li>\n<li>省去了多组件发布管理的工作</li>\n<li>危险性: 组件之间的独立性逐渐降低、隔离弱化</li>\n<li>单向边界: 在设计时就进行必要的依赖反转, 使得跨边界调用保持单向</li>\n<li>危险性: 只能依赖于开发者和架构师的自律性来保证组件的持久隔离</li>\n<li>门户模式: 边界由一个统一的类来定义, 这个类中包含了所有的服务函数列表, 负责将外层的调用传递给外层不可见的服务函数</li>\n<li>危险性: 外层组件传递性地依赖于所有服务函数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-25-章-层次与边界\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-25-%E7%AB%A0-%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C\" aria-label=\"第 25 章 层次与边界 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 25 章 层次与边界</h3>\n<ul>\n<li>本章示例: 将一个简单的小程序逐步扩展为具有系统架构边界的复杂程序</li>\n<li>架构边界可以存在于任何地方, 需要小心审视何时需要设计架构边界</li>\n<li>\n<p>困难之处</p>\n<ul>\n<li>完全实现边界需要很高的成本, 且违反 YAGNI 原则, 容易过度设计</li>\n<li>如果事先忽略了某些边界, 后续再添加可能极为困难</li>\n</ul>\n</li>\n<li>\n<p>架构师</p>\n<ul>\n<li>权衡哪里需要设计架构边界</li>\n<li>权衡需要完整边界 or 不完整的边界</li>\n<li>持续观察系统演进、权衡架构边界成本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-26-章-main-组件\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-26-%E7%AB%A0-main-%E7%BB%84%E4%BB%B6\" aria-label=\"第 26 章 main 组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 26 章 Main 组件</h3>\n<ul>\n<li>负责创建、协调、监督其他组件运转</li>\n<li>最底层、最细节的策略, 没有其他组件依赖于它</li>\n<li>\n<p>任务</p>\n<ul>\n<li>设置起始状态、配置信息、加载外部资源, 并将系统控制权交给最高抽象层的代码</li>\n</ul>\n</li>\n<li>可以以插件形式为系统设计多个 Main 组件对应于不同的配置</li>\n</ul>\n<h3 id=\"第-27-章-服务-宏观与微观\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-27-%E7%AB%A0-%E6%9C%8D%E5%8A%A1-%E5%AE%8F%E8%A7%82%E4%B8%8E%E5%BE%AE%E8%A7%82\" aria-label=\"第 27 章 服务 宏观与微观 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 27 章 服务: 宏观与微观</h3>\n<ul>\n<li>\n<p>面向服务的架构</p>\n<ul>\n<li>服务只是一种跨进程/平台边界的函数调用, 不一定蕴含架构的意义</li>\n<li>架构是由跨越架构边界的关键函数调用来定义的, 并且必须遵守依赖关系规则</li>\n</ul>\n</li>\n<li>\n<p>服务的好处谬论</p>\n<ul>\n<li>解耦合</li>\n<li>任何形式的共享数据行为都会导致强耦合</li>\n<li>服务的接口与函数接口类似, 并没有更好</li>\n<li>独立开发部属</li>\n<li>并非服务仅有的特性, 采用单体或组件模式同样可以独立开发和部属</li>\n<li>强耦合的服务并不能真正做到独立开发部属维护</li>\n</ul>\n</li>\n<li>\n<p>服务与架构</p>\n<ul>\n<li>系统的架构边界在服务内部的组件而不在服务上</li>\n<li>在服务内部应采用遵守依赖关系原则的组件设计方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-28-章-测试边界\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-28-%E7%AB%A0-%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C\" aria-label=\"第 28 章 测试边界 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 28 章 测试边界</h3>\n<ul>\n<li>\n<p>测试也是一种系统组件</p>\n<ul>\n<li>遵守依赖关系原则: 处于最外层, 向内依赖</li>\n<li>测试组件可以独立部署(测试环境)</li>\n<li>支持开发过程, 而非运行过程(往往不会部属到生产环境)</li>\n</ul>\n</li>\n<li>\n<p>可测试性设计</p>\n<ul>\n<li>脆弱的测试问题</li>\n<li>测试代码与系统强耦合, 系统组件的小变化都需要测试组件做出相应变更</li>\n<li>GUI 是多变的, 通过 GUI 来验证系统的测试一定是脆弱的, 应该让业务逻辑不通过 GUI 也能被测试</li>\n<li>测试专用 API</li>\n<li>拥有超级用户权限, 允许测试代码忽视安全限制、绕过成本高昂的资源(数据库), 强制将系统设置到可测试状态中</li>\n<li>将测试代码从应用程序中分离</li>\n<li>\n<p>避免结构性耦合</p>\n<ul>\n<li>如果每个产品函数都有一个对应的测试函数, 那么测试套件与应用程序在结构上是紧耦合的, 导致脆弱的测试问题. 测试专用 API 使测试代码与应用程序解耦.</li>\n</ul>\n</li>\n<li>安全性: 具有超级权限的测试专用 API 应该放置在单独的、可独立部属的组件中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-29-章-整洁的嵌入式结构\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-29-%E7%AB%A0-%E6%95%B4%E6%B4%81%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BB%93%E6%9E%84\" aria-label=\"第 29 章 整洁的嵌入式结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 29 章 整洁的嵌入式结构</h3>\n<ul>\n<li>\n<p>软件与固件</p>\n<ul>\n<li>软件本身不会随时间而磨损, 周期很长</li>\n<li>但硬件和固件会随着硬件演进而过时, 进而可能导致软件无法使用.</li>\n<li>固件代码</li>\n<li>对特定硬件平台 API 依赖的代码都属于固件代码, 如未分离业务与系统 API 调用的 Android 开发</li>\n</ul>\n</li>\n<li>分离固件代码: 延长软件代码的生命周期</li>\n<li>\n<p>”程序适用测试“</p>\n<ul>\n<li>如果代码只有在特定硬件平台上才能被测试, 那么即使通过了“适用性测试”, 仍不能说其拥有整洁的嵌入式架构. 除非这个产品永远不需要迁移到其他硬件平台</li>\n<li>目标硬件瓶颈: 嵌入式开发面临的特有的问题</li>\n</ul>\n</li>\n<li>整洁的嵌入式架构就是可测试的嵌入式架构</li>\n<li>\n<p>目标硬件瓶颈解决方案</p>\n<ul>\n<li>分层</li>\n<li>硬件、固件、[操作系统]、软件</li>\n<li>\n<p>边界</p>\n<ul>\n<li>代码与硬件: 边界比较清晰</li>\n<li>软件(操作系统)与固件</li>\n<li>硬件抽象层(HAL): 为软件提供服务, 隐藏硬件实现细节</li>\n<li>软件与操作系统</li>\n<li>操作系统抽象层(OSAL): 隐藏操作系统实现细节</li>\n</ul>\n</li>\n<li>面向接口编程与可替代性</li>\n<li>模块之间定义接口进行通信</li>\n<li>每一个借口都为平台之外的测试提供替换点</li>\n<li>DRY 条件性编译命令</li>\n<li>问题: 如果程序中多次使用了重复的条件性编译命令来为不同平台启用/禁用一段代码</li>\n<li>方案: 使用硬件抽象层(HAL)隐藏硬件类型, 然后使用链接器或某种运行时加载器进行软硬件组合</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六部分-实现细节\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\" aria-label=\"第六部分 实现细节 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第六部分 实现细节</h2>\n<h3 id=\"第-30-章-数据库只是实现细节\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-30-%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AA%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\" aria-label=\"第 30 章 数据库只是实现细节 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 30 章 数据库只是实现细节</h3>\n<ul>\n<li>数据库不是数据模型, 而只是存储数据的工具</li>\n<li>依赖数据库表结构的代码应该被局限在系统架构的最外层的工具函数中</li>\n<li>\n<p>数据库溯源: 优化磁盘存储</p>\n<ul>\n<li>文件系统: 便于存储和检索文档, 但对文档内容难以关注</li>\n<li>数据库系统: 关注文档/记录的内容/属性</li>\n<li>存储的未来</li>\n<li>基于 RAM, 将数据组织成最合适的数据结构</li>\n<li>基于文件和表格(数据库)的形式被逐渐取代</li>\n</ul>\n</li>\n<li>系统架构不应关心数据在磁盘上如何存储这种实现细节</li>\n<li>\n<p>性能考量</p>\n<ul>\n<li>性能是系统架构的一个考量标准</li>\n<li>数据存储方面的性能是底层问题, 不需要与系统架构相关联</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-31-章-web-是实现细节\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-31-%E7%AB%A0-web-%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\" aria-label=\"第 31 章 web 是实现细节 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 31 章 Web 是实现细节</h3>\n<ul>\n<li>\n<p>Web 的振荡式发展</p>\n<ul>\n<li>\n<ol>\n<li>将计算资源集中在服务器集群中, 浏览器保持简单</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Web2.0 用 Ajax 和 JavaScript 将很多计算挪到浏览器中执行</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>用 Nodejs 技术将 JavaScript 代码挪回到服务器中执行</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>GUI 只是实现细节, 而 Web 是 GUI 中的一种</li>\n<li>作为软件架构师, 需要将其与核心业务逻辑进行隔离</li>\n<li>\n<p>将 Web 应用抽象为设备无关架构</p>\n<ul>\n<li>业务逻辑 -> 一组用例</li>\n<li>用例 -> 输入、处理、输出数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-32-章-应用程序框架是实现细节\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-32-%E7%AB%A0-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\" aria-label=\"第 32 章 应用程序框架是实现细节 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 32 章 应用程序框架是实现细节</h3>\n<ul>\n<li>\n<p>框架的目的</p>\n<ul>\n<li>解决框架作者所侧重的一些问题, 而不是解决你的问题——只是这些问题有较大的重合性</li>\n</ul>\n</li>\n<li>\n<p>单向约定</p>\n<ul>\n<li>开发者需要遵守框架的一系列约定</li>\n<li>框架作者不需要遵守什么约定</li>\n</ul>\n</li>\n<li>\n<p>风险</p>\n<ul>\n<li>框架自身的架构设计可能不正确</li>\n<li>产品的演进可能超出框架提供的能力范围</li>\n<li>框架本身可能朝着我们不需要的方向演进, 被迫进行不必要的升级或悄悄改变了行为</li>\n</ul>\n</li>\n<li>\n<p>解决方案</p>\n<ul>\n<li>将框架作为实现细节, 不要将其引入内圈</li>\n<li>不要基于框架的基类创建派生类, 可以创造一些代理类作为业务逻辑的插件</li>\n<li>根据依赖关系原则, 将框架作为核心代码的插件</li>\n<li>可以在最外层的 Main 组件中引入、依赖框架</li>\n</ul>\n</li>\n<li>对于不得不接受的框架依赖, 需要慎重决定</li>\n</ul>\n<h3 id=\"第-33-章-案例分析-视频销售网站\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-33-%E7%AB%A0-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90-%E8%A7%86%E9%A2%91%E9%94%80%E5%94%AE%E7%BD%91%E7%AB%99\" aria-label=\"第 33 章 案例分析 视频销售网站 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 33 章 案例分析: 视频销售网站</h3>\n<ul>\n<li>\n<ol>\n<li>识别系统中的各种角色和用例</li>\n<li>角色: 单一职责原则(SRP)</li>\n<li>角色作为系统变更的主要驱动力, 一个角色的变更需求不影响其他角色</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>构造组件架构图</li>\n<li>构建系统架构边界</li>\n<li>分割组件</li>\n<li>每个组件对应一个潜在的独立部署文件, 包含视图、展示器、交互器、控制器文件</li>\n<li>\n<p>独立部属</p>\n<ul>\n<li>每个组件独立交付部属是否过于繁琐?</li>\n<li>将组件组合为多个交付单元来部属, 如交付为视图、展示器、交互器、控制器和工具类 5 个.jar 文件</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>依赖关系管理</li>\n<li>控制流: 从控制器输入数据, 经由交互器处理, 再由展示器格式化出结果, 最后由视图展示结果</li>\n<li>依赖关系: 与控制流方向相反, 由低层指向高层</li>\n<li>使用关系: 与控制流一致</li>\n<li>“继承”关系: 与控制流相反</li>\n</ol>\n</li>\n<li>\n<p>总结: 架构实现了两个维度上的隔离</p>\n<ul>\n<li>根据单一职责原则隔离各个角色</li>\n<li>应用依赖关系原则</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-34-章-拾遗\" style=\"position:relative;\"><a href=\"#%E7%AC%AC-34-%E7%AB%A0-%E6%8B%BE%E9%81%97\" aria-label=\"第 34 章 拾遗 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第 34 章 拾遗</h3>\n<ul>\n<li>\n<p>代码结构设计</p>\n<ul>\n<li>水平分层</li>\n<li>\n<p>层次</p>\n<ul>\n<li>Web 代码</li>\n<li>业务逻辑</li>\n<li>持久化</li>\n</ul>\n</li>\n<li>在项目初期合适, 不会过于复杂; 一旦软件规模扩展, 就需要进一步进行模块化</li>\n<li>问题: 无法展现具体的业务领域信息</li>\n<li>垂直切分</li>\n<li>按功能、业务概念或聚合根(DDD 术语)切分, 每一类放在一个包中, 以业务概念命名</li>\n<li>水平分层与垂直切分都很不好</li>\n<li>隔离业务领域与实现细节(数据库、框架等)</li>\n<li>端口和适配器模式</li>\n<li>六边形架构</li>\n<li>边界、控制器、实体</li>\n<li>按组件封装</li>\n<li>将一个粗粒度组件相关的所有类放入一个包, 类似于微服务架构, 将 UI 与粗粒度组件分离</li>\n<li>新的组件定义: 在一个执行环境（应用程序）中的、一个干净、良好的接口背后的一系列相关功能的集合</li>\n<li>优点: 一类业务的变更只需要修改一个粗粒度组件</li>\n<li>\n<p>C4 软件架构模型</p>\n<ul>\n<li>系统由一个或多个容器组成(Web 应用、移动 App、数据库、独立应用、文件系统等)</li>\n<li>容器包含一个或多个组件</li>\n<li>组件包含一个或多个类</li>\n</ul>\n</li>\n<li>将代码分散到不同的代码树</li>\n<li>\n<p>如端口与适配器架构</p>\n<ul>\n<li>例 1</li>\n<li>业务代码树: 所有技术和框架无关的代码</li>\n<li>Web 源代码树</li>\n<li>持久化源代码树</li>\n<li>例 2</li>\n<li>业务(Domain)代码(内部)</li>\n<li>基础设施(Infrastructure)代码(外部)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>中心思想: 要将架构设计映射到具体的代码结构上</li>\n</ul>\n<hr>\n<h2 id=\"思维导图\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" aria-label=\"思维导图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思维导图</h2>\n<p><img src=\"./CleanArchitecture.png\" alt=\"Clean Architecture 思维导图\"></p>","frontmatter":{"title":"Clean Architecture","date":"June 18, 2021","description":"《Clean Architecture》(《架构整洁之道》)读书笔记"}},"previous":{"fields":{"slug":"/gtd-2/"},"frontmatter":{"title":"GTD之二：实践要点"}},"next":{"fields":{"slug":"/online-editor/"},"frontmatter":{"title":"在线编辑器实现浅析"}}},"pageContext":{"id":"74e32349-2480-5d36-aa8e-7f80dc4f541a","previousPostId":"dc4bd146-1772-5d16-ab1c-ca9f9b833e93","nextPostId":"30b2715f-aa77-5298-97be-8587fe5d1c54"}},"staticQueryHashes":["2841359383","3257411868"]}