{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-type-guards/","result":{"data":{"site":{"siteMetadata":{"title":"按太阳穴轮刮眼眶"}},"markdownRemark":{"id":"418fed14-5d5e-52d4-947e-9bc82b303e7c","excerpt":"场景: 当一个变量拥有复合类型, 在某些情况下我们需要对其进行类型断言. 比如: 学生体检时, 除了若干公共体检项目外, 男生还需要检查 A 项目, 女生需要检查 B 项目, 男女生体检结果汇总在一个表中. 在实际操作中, 我们需要根据体检人的 sex(性别)字段来确定展示 A 项目还是 B…","html":"<p>场景: 当一个变量拥有复合类型, 在某些情况下我们需要对其进行类型断言.</p>\n<p>比如: 学生体检时, 除了若干公共体检项目外, 男生还需要检查 A 项目, 女生需要检查 B 项目, 男女生体检结果汇总在一个表中. 在实际操作中, 我们需要根据体检人的 sex(性别)字段来确定展示 A 项目还是 B 项目的体检结果. 代码如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Boy</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  sex<span class=\"token operator\">:</span> SexEnum\n  itemA<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Girl</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  sex<span class=\"token operator\">:</span> SexEnum\n  itemB<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">=</span> Boy <span class=\"token operator\">|</span> Girl\n\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">:</span> Student <span class=\"token operator\">=</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">===</span> SexEnum<span class=\"token punctuation\">.</span>Boy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>itemA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在代码中, 编译器无法确定 <code class=\"language-text\">s</code> 为 <code class=\"language-text\">Boy</code> 类型, 似乎只能通过丑陋的 <code class=\"language-text\">as unknow as Boy</code> 或 <code class=\"language-text\">@ts-ignore</code> 来绕过错误.</p>\n<h2>Build-in Type Guards</h2>\n<p>JS 中内置的 Type Guards 有 <code class=\"language-text\">typeof</code> 和 <code class=\"language-text\">instanceof</code> , 但都无法解决问题:</p>\n<ul>\n<li><code class=\"language-text\">typeof</code> 只能判断基本类型</li>\n<li><code class=\"language-text\">instanceof</code> 只能应用在 class 中, 函数式编程中极少使用 class, 所以作用有限</li>\n</ul>\n<h2>解决方案: Custom Type Guards</h2>\n<p>示例代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> isBoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>student<span class=\"token operator\">:</span> Student<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> student <span class=\"token keyword\">is</span> <span class=\"token parameter\">Boy</span> <span class=\"token operator\">=></span> student<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">===</span> SexEnum<span class=\"token punctuation\">.</span>Boy\n\n<span class=\"token comment\">// 另一种写法</span>\n<span class=\"token keyword\">const</span> isBoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>student<span class=\"token operator\">:</span> Student<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> student <span class=\"token keyword\">is</span> <span class=\"token parameter\">Boy</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>student <span class=\"token keyword\">as</span> Boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>itemA <span class=\"token operator\">!==</span> undefine\n\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">:</span> Student <span class=\"token operator\">=</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBoy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>itemA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关键点:</p>\n<ul>\n<li>返回值应声明为 <code class=\"language-text\">variable is Type</code> 的形式, 如  <code class=\"language-text\">student is Boy</code></li>\n<li>函数体返回一个可以进行类型断言的 bool 值, 如  <code class=\"language-text\">student.sex === SexEnum.Boy</code> .</li>\n</ul>\n<h2>A generic(范型) type guard</h2>\n<p>如果需要编写许多 Type Guards, 使用 custom 的方式将会十分繁复, 不够 DRY.</p>\n<p>Generic Type Guard:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> isOfType <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  varToBeChecked: any,\n  propertyToCheckFor: keyof T\n): varToBeChecked is T =>\n  (varToBeChecked as T)[propertyToCheckFor] !== undefined;</span></code></pre></div>\n<p>Use case:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOfType <span class=\"token operator\">&lt;</span> Car <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token string\">\"turnSteeringWheel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 此处item被成功断言为Car</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dude, where's my car?!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>问题: 只通过一个属性来断言类型, 有时不够安全. 需要根据实际情况进行修改, 如传入属性列表或其他配置项.</p>\n</blockquote>","frontmatter":{"title":"TypeScript Type Guards","date":"February 09, 2020","description":"TypeScript中对复合类型进行类型断言"}},"previous":{"fields":{"slug":"/caged/"},"frontmatter":{"title":"CAGED Guitar System"}},"next":{"fields":{"slug":"/html5/"},"frontmatter":{"title":"HTML5技术扫盲"}}},"pageContext":{"id":"418fed14-5d5e-52d4-947e-9bc82b303e7c","previousPostId":"53de9a82-1068-5a59-9032-e1dbd0e16ad2","nextPostId":"7e8300d3-7450-56f6-9160-2f8a0da57a8b"}},"staticQueryHashes":["2841359383","3257411868"]}