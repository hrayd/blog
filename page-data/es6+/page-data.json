{"componentChunkName":"component---src-templates-blog-post-js","path":"/es6+/","result":{"data":{"site":{"siteMetadata":{"title":"按太阳穴轮刮眼眶"}},"markdownRemark":{"id":"65ea000a-b635-5aad-a0c8-b0e5d6edf37b","excerpt":"ES2021 逻辑赋值运算符 类似于   等运算符:    数字分隔符 允许在数字中间添加下划线  增强可读性. 不允许出现在数字的首尾位置. 如:  注意: 带下划线的 String 类型的数字无法正常转换: Promise.any() 接收一个 Promise 数组, 返回第一个  的 Promise…","html":"<h2>ES2021</h2>\n<h3>逻辑赋值运算符</h3>\n<p>类似于 <code class=\"language-text\">+=</code> <code class=\"language-text\">*=</code> 等运算符:</p>\n<ul>\n<li><code class=\"language-text\">??=</code></li>\n<li><code class=\"language-text\">&amp;&amp;=</code></li>\n<li><code class=\"language-text\">||=</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\na <span class=\"token operator\">??=</span> <span class=\"token string\">\"flag\"</span> <span class=\"token comment\">// a = a ?? \"flag\"</span>\na <span class=\"token operator\">&amp;&amp;=</span> <span class=\"token string\">\"flag\"</span> <span class=\"token comment\">// a = a &amp;&amp; \"flag\"</span>\na <span class=\"token operator\">||=</span> <span class=\"token string\">\"falg\"</span> <span class=\"token comment\">// a = a || \"flag\"</span></code></pre></div>\n<h3>数字分隔符</h3>\n<p>允许在数字中间添加下划线 <code class=\"language-text\">_</code> 增强可读性.</p>\n<p>不允许出现在数字的首尾位置.</p>\n<p>如: <code class=\"language-text\">1_000_000</code></p>\n<p>注意: 带下划线的 String 类型的数字无法正常转换:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1000</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1_000\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<h3>Promise.any()</h3>\n<p>接收一个 Promise 数组, 返回第一个 <code class=\"language-text\">fulfilled</code> 的 Promise 返回值.</p>\n<p>当所有的 Promise 都 <code class=\"language-text\">rejected</code> 时, 进入 <code class=\"language-text\">catch</code> 块并返回 <code class=\"language-text\">AggregateError</code> 类型的错误.</p>\n<p>对比 Promise.race() 是返回第一个 <code class=\"language-text\">fulfilled</code> 或 <code class=\"language-text\">rejected</code> 的 Promise 返回值.</p>\n<h3>String.replaceAll()</h3>\n<p><code class=\"language-text\">String.replace()</code> 只替换第一次匹配的字符</p>\n<h3>WeakRefs 与 FinalizationRegistry</h3>\n<p>WeakRefs 为对象创建一个弱引用, 弱引用不会组织 JS 引擎垃圾回收期的回收, 一般很少使用.</p>\n<p>使用 FinalizationRegistry 对象可以在垃圾回收器回收对象时, 执行回调函数:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 构建监听对象被垃圾回收器清除的回调</span>\n<span class=\"token keyword\">const</span> registry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizationRegistry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heldValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----\"</span><span class=\"token punctuation\">,</span> heldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 注册监听</span>\nregistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"obj deleted!\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 取消监听</span>\n<span class=\"token comment\">// registry.unregister(token);</span>\n\n<span class=\"token comment\">// 可能很久以后，回调执行</span>\n<span class=\"token comment\">// ---- obj deleted!</span></code></pre></div>\n<h2>ES 2020</h2>\n<h3>链式判断运算符 <code class=\"language-text\">?.</code></h3>\n<p>支持 <code class=\"language-text\">obj?.a?.b?.c</code> 运算, 当中间某个属性为 <code class=\"language-text\">null</code> 或 <code class=\"language-text\">undefined</code> 时, 直接返回 <code class=\"language-text\">undefined</code> .</p>\n<p>同时支持 <code class=\"language-text\">obj?.[expr]</code> 方括号形式与 <code class=\"language-text\">fun?.(...args)</code> 函数调用形式.</p>\n<h3><code class=\"language-text\">??</code> 运算符</h3>\n<p>类似于 <code class=\"language-text\">||</code> , 但只有运算符左侧值为 <code class=\"language-text\">null</code> 或 <code class=\"language-text\">undefined</code> 时才返回右侧值.</p>\n<p>如 <code class=\"language-text\">const username = list?.info?.base?.username ?? &#39;user&#39;;</code></p>\n<p>而 <code class=\"language-text\">||</code> 运算符在左侧为 <code class=\"language-text\">null</code> <code class=\"language-text\">undefined</code> <code class=\"language-text\">&#39;&#39;</code> <code class=\"language-text\">false</code> 和 <code class=\"language-text\">0</code> 时都会返回右侧值.</p>\n<h3><code class=\"language-text\">import()</code> 函数</h3>\n<p>之前的 <code class=\"language-text\">import</code> 只能用在模块顶层, 无法支持动态加载或条件导入模块.</p>\n<p><code class=\"language-text\">import()</code> 函数支持动态加载模块, 返回一个 <code class=\"language-text\">Promise</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">===</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./home.js\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> export1<span class=\"token punctuation\">,</span> export2 <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 加载成功</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 加载失败</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>适用于:</p>\n<ul>\n<li>按需加载(如点击某按钮)</li>\n<li>条件加载</li>\n<li>动态的模块路径</li>\n</ul>\n<h3><code class=\"language-text\">export * as xx from &quot;someModule&quot;</code></h3>\n<p>相当于以下两个语句:</p>\n<ul>\n<li><code class=\"language-text\">import * as xx from &quot;someModule&quot;;</code></li>\n<li><code class=\"language-text\">export {xx};</code></li>\n</ul>\n<h3>BigInt 类型</h3>\n<p>可精确表示任意位数的整数, BigInt 类型的数据需要添加后缀 <code class=\"language-text\">n</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">34242345425325n</span>\n<span class=\"token keyword\">typeof</span> n <span class=\"token comment\">// \"bigint\"</span>\n<span class=\"token comment\">// 作为构造函数</span>\n<span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3243</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3243n</span>\n<span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"324\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 324n</span>\n<span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0n</span>\n<span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1n</span></code></pre></div>\n<h3>Promise.allSettled()</h3>\n<p>接收一组 Promise 实例作为参数, 当这些 Promise 都返回结果, 无论是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code> , 状态都会变为 <code class=\"language-text\">fulfilled</code> , 返回 <code class=\"language-text\">[{ status: &quot;fulfilled&quot; | &quot;rejected&quot;, value?: any, reason?: any }]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> resolved <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rejected <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> allSettledPromise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>resolved<span class=\"token punctuation\">,</span> rejected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nallSettledPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//    { status: 'fulfilled', value: 42 },</span>\n<span class=\"token comment\">//    { status: 'rejected', reason: -1 }</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p><a href=\"https://www.notion.so/0c758a80f21045159ebd28652c288c05\">Promise.allSettled(), Promise.all(), Promise.race()</a></p>\n<h3>String.matchAll()</h3>\n<p>返回一个正则表达式在当前字符串中的所有匹配.</p>\n<p>返回一个迭代器, 可以使用 <code class=\"language-text\">for..of</code> 遍历或使用 <code class=\"language-text\">Array.from()</code> 转为数组遍历.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">t(e)(st(\\d?))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"test1test2test3\"</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [[\"test1\", \"e\", \"str1\", \"1\"],</span>\n<span class=\"token comment\">//  [\"test2\", \"e\", \"str2\", \"2\"],</span>\n<span class=\"token comment\">//  [\"test3\", \"e\", \"str3\", \"3\"]]</span></code></pre></div>\n<h3>globalThis</h3>\n<p>全局属性 <code class=\"language-text\">globalThis</code> 包含全局的 <code class=\"language-text\">this</code> 对象.</p>\n<p>以前在不同环境下获取全局 <code class=\"language-text\">this</code> 对象的方法各不相同, 如:</p>\n<ul>\n<li>在 Web 中通过 <code class=\"language-text\">window</code> 或 <code class=\"language-text\">self</code> 获取 <code class=\"language-text\">this</code></li>\n<li>在 WebWorkers 中只能通过 <code class=\"language-text\">self</code> 获取 <code class=\"language-text\">this</code></li>\n<li>在 Nodejs 中需要使用 <code class=\"language-text\">global</code> 获取 <code class=\"language-text\">this</code></li>\n</ul>\n<p>需要通过判断各种对象是否存在来获取 <code class=\"language-text\">this</code>, 较为繁琐.</p>\n<p><code class=\"language-text\">globalThis</code> 提供了一个标准方式来获取全局 <code class=\"language-text\">this</code> , 在各种环境下都适用.</p>\n<h3><code class=\"language-text\">for..in</code> 定义了明确的顺序</h3>\n<p><code class=\"language-text\">for (x in y)</code> 语句将以规定的顺序执行.</p>\n<h3>import.meta</h3>\n<p>返回带有 <code class=\"language-text\">url</code> 属性的对象, 可获取模块的基础 URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { url: \"file:///home/user/module.js\" }</span></code></pre></div>\n<h2>ES 2019</h2>\n<h3>String.trimStart() / String.trimEnd()</h3>\n<p>单独去掉 String 头或尾部的空白字符.</p>\n<h3>Object.fromEntries()</h3>\n<p>即 <code class=\"language-text\">Object.entries()</code> 的逆过程, 将 <code class=\"language-text\">[[key, value]]</code> 形式的键值对转为对象结构:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> entries <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nentries <span class=\"token comment\">// [[\"a\", \"aa\"], [\"b\", 40]]</span>\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span>\nobj1 <span class=\"token comment\">// {a: \"aa\", b: 40}</span></code></pre></div>\n<h3>Array.flat() / Array.flatMap()</h3>\n<ul>\n<li>\n<p>Array.flat([depth = 1]) 按照指定深度展开/铺平数组, 默认深度为 1</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,[3,4]]</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4]</span></code></pre></div>\n</li>\n<li>\n<p>Array.flatMap() 即 <code class=\"language-text\">Array.map()</code> + <code class=\"language-text\">Array.flat(1)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"it's Sunny in\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"California\"</span><span class=\"token punctuation\">]</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [[\"it's\",\"Sunny\",\"in\"],[\"\"],[\"California\"]]</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"it's\",\"Sunny\",\"in\", \"\", \"California\"]</span></code></pre></div>\n</li>\n</ul>\n<h3>catch 参数可省略</h3>\n<p>支持语法 <code class=\"language-text\">try {...} catch {...}</code> .</p>\n<h3>Symbol.description</h3>\n<p>获取 Symbol 对象创建时的描述信息:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> symbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a symbol\"</span><span class=\"token punctuation\">)</span>\nsymbol <span class=\"token comment\">// Symbol(This is a symbol)</span>\nsymbol<span class=\"token punctuation\">.</span>description <span class=\"token comment\">// \"This is a symbol\"</span></code></pre></div>\n<h3>加强 JSON.parse() 与 JSON.stringify()</h3>\n<p>之前 JSON 字符串中包含行分隔符 <code class=\"language-text\">\\u2028</code> 或 段落分隔符 <code class=\"language-text\">\\u2029</code> 时, 调用 <code class=\"language-text\">JSON.parse()</code> 解析会报错, 修复了这个错误.</p>\n<p>之前对于无效的 UTF-16 字符编码, <code class=\"language-text\">JSON.stringify()</code> 会被替换为无意义的特殊字符, 现在修复了这个错误:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\uD83D\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 之前: '\"�\"'</span>\n<span class=\"token comment\">// 目前: '\"\\\\ud83d\"'</span></code></pre></div>\n<h3>Array.sort()更加稳定</h3>\n<p>之前的规范允许不稳定的排序算法如快排, 目前主流浏览器都使用稳定的排序算法, 对于传入的比较算法计算结果等于 0 的情况也能保持顺序稳定.</p>\n<h3>Function.toString() 重新修订</h3>\n<p>之前的 <code class=\"language-text\">Function.toString()</code> 只返回函数主体, 丢失了原始的注释和空格等信息.</p>\n<p>现在 <code class=\"language-text\">Function.toString()</code> 返回的结果与函数编写的一致.</p>\n<h2>ES 2018</h2>\n<h3>for await…of</h3>\n<p>用于遍历异步可迭代对象(也可遍历同步可迭代对象).</p>\n<p>需要放在 <code class=\"language-text\">async function</code> 内部.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 一个异步可迭代对象</span>\n<span class=\"token keyword\">const</span> asyncIterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncIterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 遍历异步可迭代对象</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">of</span> asyncIterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Promise.finally()</h3>\n<p>当 Promise 执行结束时, 无论结果是 fulfilled 还是 rejected, 都会执行 finally 回调.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Object Rest Properties</h3>\n<p>对象剩余属性:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\na <span class=\"token comment\">// \"aa\"</span>\nb <span class=\"token comment\">// 30</span>\nothers <span class=\"token comment\">// { c: true, d: \"\" }</span></code></pre></div>\n<h3>New RegExp Features</h3>\n<p>新增 4 个 RegExp 新特性:</p>\n<ul>\n<li>Unicode 属性转义 <code class=\"language-text\">\\p{...}</code></li>\n<li>后行断言(lookbehind assertion) <code class=\"language-text\">(?&lt;=...)</code> <code class=\"language-text\">(?&lt;!)</code></li>\n<li>可命名捕获组 <code class=\"language-text\">(?&lt;name&gt;...)</code></li>\n<li>s (dotAll) Flag, 使用 <code class=\"language-text\">s</code> 标志激活 <code class=\"language-text\">.</code> 字符匹配任意一个字符(dotAll 模式)</li>\n</ul>\n<h2>ES 2017</h2>\n<h3>String Padding</h3>\n<p>使用另一个字符串(重复)填充当前字符串, 以达到指定长度</p>\n<ul>\n<li><code class=\"language-text\">padStart</code> 左侧填充</li>\n<li><code class=\"language-text\">padEnd</code> 右侧填充</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"       abc\", 默认填充空格</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc       \", 右侧填充</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"foofoofabc\", 用指定字符重复填充</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12abc\", 多余字符丢弃</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\", 若长度小于当前字符串则不变</span></code></pre></div>\n<h3>Object.entries()</h3>\n<p>返回对象自身(不包括原型链)可枚举属性的键值对数组:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [['a', 'aaa'], ['b', 20]]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>与 <code class=\"language-text\">for..in</code> 循环的顺序一致, 但 <code class=\"language-text\">for..in</code> 循环会枚举原型链中的属性.</p>\n<h3>Object.values()</h3>\n<p>返回对象自身的所有可枚举属性值的数组:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\", 20]</span></code></pre></div>\n<h3>Async Functions</h3>\n<p>使用 <code class=\"language-text\">async</code> <code class=\"language-text\">await</code> 关键字更简洁地书写基于 <code class=\"language-text\">Promise</code> 的异步行为.</p>\n<h3>Object.getOwnPropertyDescriptor()</h3>\n<p>获取对象的一个自有属性的属性描述符:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">\"aaa\"</span> <span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {value: 'aaa', writable: true, enumerable: true, configurable: true}</span></code></pre></div>\n<h3>函数参数列表中的尾随逗号</h3>\n<p>允许在函数声明和函数调用的参数列表中使用尾随逗号:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同时也支持对象字面量和数组字面量后的逗号.</p>\n<h3>SharedArrayBuffer 和 Atomics</h3>\n<p>WebWorkers 可以创建多线程程序, 使用 <code class=\"language-text\">SharedArrayBuffer</code> 创建共享数组缓冲区, 使得多个 workers 和主线程之间可以共享数据.</p>\n<p>全局对象 <code class=\"language-text\">Atomics</code> 提供了一组静态方法对 <code class=\"language-text\">SharedArrayBuffer</code> 和 <code class=\"language-text\">ArrayBuffer</code> 进行原子操作, 使得多个线程可以按规定顺序安全地读写同一位置的数据.</p>\n<blockquote>\n<p>为了防止 Spectre 漏洞, 所有主流浏览器默认禁用 SharedArrayBuffer .</p>\n</blockquote>\n<h2>ES 2016</h2>\n<h3>求幂运算符 **</h3>\n<p><code class=\"language-text\">let x = 2 ** 5;</code></p>\n<p>等价于 <code class=\"language-text\">Math.pow(x, y)</code></p>\n<p>“幂等”运算符 <code class=\"language-text\">**=</code> , 如:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">let x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">**=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 相当于x <span class=\"token operator\">=</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span></code></pre></div>\n<h3>Array.includes()</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">let arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span>includes<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token operator\">//</span> true\narr<span class=\"token punctuation\">.</span>includes<span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token operator\">//</span> false</code></pre></div>\n<h2>ES6 (ES2015)</h2>\n<h3>关键字和类型</h3>\n<ul>\n<li><code class=\"language-text\">let</code> 与 <code class=\"language-text\">const</code> 声明</li>\n<li>箭头函数</li>\n<li>\n<p><code class=\"language-text\">for/of</code> 遍历可迭代的数据结构: Array, String, Map, NodeList 等</p>\n<ul>\n<li>区分 <code class=\"language-text\">for/in</code> : 遍历所有可枚举属性, 适用于遍历 Object 属性</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Map</code> 对象</li>\n<li><code class=\"language-text\">Set</code> 对象</li>\n<li><code class=\"language-text\">class</code> “面向对象”相关方法实现</li>\n<li><code class=\"language-text\">Promise</code></li>\n<li><code class=\"language-text\">Symbol</code> 基本类型</li>\n</ul>\n<h3>Function</h3>\n<ul>\n<li>Function 参数默认值 <code class=\"language-text\">function fn(x = 2){...}</code></li>\n<li>Function 剩余参数 <code class=\"language-text\">function fn(a, b, ...others) {...}</code></li>\n</ul>\n<h3>String</h3>\n<ul>\n<li><code class=\"language-text\">String.includes()</code></li>\n<li><code class=\"language-text\">String.startsWith()</code> <code class=\"language-text\">String.endsWith()</code></li>\n</ul>\n<h3>Array</h3>\n<ul>\n<li><code class=\"language-text\">Array.from()</code> 从具有长度或可迭代的对象创建数组, 如 Set, String 等</li>\n<li><code class=\"language-text\">Array.keys()</code> 返回数组的索引迭代器</li>\n<li><code class=\"language-text\">Array.find()</code> <code class=\"language-text\">Array.findIndex()</code> 返回满足测试函数的第一个元素 / 元素索引.</li>\n</ul>\n<h3>Math</h3>\n<ul>\n<li><code class=\"language-text\">Math.trunc()</code> 截取整数部分</li>\n<li><code class=\"language-text\">Math.sign()</code> 返回数字的符号, 取值: 1, -1, 0, -0, NaN, 传入参数会被隐式转换为数字.</li>\n<li><code class=\"language-text\">Math.cbrt()</code> 立方根</li>\n<li><code class=\"language-text\">Math.log2()</code> <code class=\"language-text\">Math.log10()</code></li>\n</ul>\n<h3>Number</h3>\n<ul>\n<li><code class=\"language-text\">Number.EPSILON</code> 最小精度值, 两数之差小于此值可认为两数相等.</li>\n<li><code class=\"language-text\">Number.MIN_SAFE_INTEGER</code> <code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> 安全整数范围</li>\n<li><code class=\"language-text\">Number.isInteger()</code> <code class=\"language-text\">Number.isSafeInteger()</code></li>\n</ul>\n<h3>Global Methods</h3>\n<ul>\n<li><code class=\"language-text\">isFinite()</code> 参数为 <code class=\"language-text\">Infinity</code> 或 <code class=\"language-text\">NaN</code> 是返回 <code class=\"language-text\">false</code>, 其他情况为 <code class=\"language-text\">true</code></li>\n<li><code class=\"language-text\">isNaN()</code></li>\n</ul>\n<h3>Object</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.entries()</code> 返回对象可枚举属性的键值对数组</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const o = { a: &quot;aa&quot;, b: 2 };\nconsole.log(Object.entries(o));  // [[&quot;a&quot;, &quot;aa&quot;], [&quot;b&quot;, 2]]</code></pre></div>\n</li>\n</ul>\n<h3>JavaScript Modules</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules - JavaScript | MDN</a></p>","frontmatter":{"title":"ES6+新特性扫盲","date":"September 11, 2021","description":"ES6(ES2015) - ES2021新增特性概览"}},"previous":{"fields":{"slug":"/http-3/"},"frontmatter":{"title":"HTTP之三：安全的HTTPS"}},"next":null},"pageContext":{"id":"65ea000a-b635-5aad-a0c8-b0e5d6edf37b","previousPostId":"cc5d8afd-d1ac-544d-968c-8e5a2eab50ea","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}